# -*- coding: utf-8 -*-

"""
manager

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from manager.api_helper import APIHelper
from manager.configuration import Server
from manager.controllers.base_controller import BaseController
from manager.http.auth.o_auth_2 import OAuth2
from manager.exceptions.m_400_exception import M400Exception


class OpenApiController(BaseController):

    """A Controller to access Endpoints in the manager API."""

    def __init__(self, config, call_back=None):
        super(OpenApiController, self).__init__(config, call_back)

    def openapi_openapi_by_version_get(self,
                                       version):
        """Does a GET request to /openapi/{version}/_openapi.

        Get the OpenAPI spec for a specific API version

        Args:
            version (string): TODO: type description here.

        Returns:
            object: Response from the API. The OpenAPI spec

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(version=version)

        # Prepare query URL
        _url_path = '/openapi/{version}/_openapi'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'version': {'value': version, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 404:
            raise M400Exception('Not found', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded
