# -*- coding: utf-8 -*-

"""
manager

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from manager.models.filters import Filters


class VendorProductOptionsInfoResponse(object):

    """Implementation of the 'Vendor Product Options Info Response' model.

    TODO: type model description here.

    Attributes:
        add_columns (object): TODO: type description here.
        edit_columns (object): TODO: type description here.
        filters (Filters): TODO: type description here.
        permissions (list of string): The user permissions for this API
            resource

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "add_columns": 'add_columns',
        "edit_columns": 'edit_columns',
        "filters": 'filters',
        "permissions": 'permissions'
    }

    def __init__(self,
                 add_columns=None,
                 edit_columns=None,
                 filters=None,
                 permissions=None):
        """Constructor for the VendorProductOptionsInfoResponse class"""

        # Initialize members of the class
        self.add_columns = add_columns
        self.edit_columns = edit_columns
        self.filters = filters
        self.permissions = permissions

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        add_columns = dictionary.get('add_columns')
        edit_columns = dictionary.get('edit_columns')
        filters = Filters.from_dictionary(dictionary.get('filters')) if dictionary.get('filters') else None
        permissions = dictionary.get('permissions')

        # Return an object of this model
        return cls(add_columns,
                   edit_columns,
                   filters,
                   permissions)
