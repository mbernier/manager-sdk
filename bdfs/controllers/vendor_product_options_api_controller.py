# -*- coding: utf-8 -*-

"""
bdfs

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bdfs.api_helper import APIHelper
from bdfs.configuration import Server
from bdfs.controllers.base_controller import BaseController
from bdfs.http.auth.o_auth_2 import OAuth2
from bdfs.models.vendor_product_options_response import VendorProductOptionsResponse
from bdfs.models.vendor_product_options_response_1 import VendorProductOptionsResponse1
from bdfs.models.vendor_product_options_info_response import VendorProductOptionsInfoResponse
from bdfs.models.vendor_product_options_response_2 import VendorProductOptionsResponse2
from bdfs.models.vendor_product_options_response_3 import VendorProductOptionsResponse3
from bdfs.models.vendor_product_options_response_4 import VendorProductOptionsResponse4
from bdfs.exceptions.m_400_exception import M400Exception


class VendorProductOptionsApiController(BaseController):

    """A Controller to access Endpoints in the bdfs API."""

    def __init__(self, config, call_back=None):
        super(VendorProductOptionsApiController, self).__init__(config, call_back)

    def vendor_product_options_get(self):
        """Does a GET request to /vendor_product_options/.

        Get a list of models

        Returns:
            VendorProductOptionsResponse: Response from the API. Items from
                Model

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/vendor_product_options/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise M400Exception('Bad request', _response)
        elif _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 422:
            raise M400Exception('Could not process entity', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VendorProductOptionsResponse.from_dictionary)

        return decoded

    def vendor_product_options_post(self,
                                    body):
        """Does a POST request to /vendor_product_options/.

        TODO: type endpoint description here.

        Args:
            body (VendorProductOptionsApiPost): Model schema

        Returns:
            VendorProductOptionsResponse1: Response from the API. Item
                inserted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/vendor_product_options/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise M400Exception('Bad request', _response)
        elif _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 422:
            raise M400Exception('Could not process entity', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VendorProductOptionsResponse1.from_dictionary)

        return decoded

    def vendor_product_options_info_get(self):
        """Does a GET request to /vendor_product_options/_info.

        Get metadata information about this API resource

        Returns:
            VendorProductOptionsInfoResponse: Response from the API. Item from
                Model

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/vendor_product_options/_info'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise M400Exception('Bad request', _response)
        elif _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 422:
            raise M400Exception('Could not process entity', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VendorProductOptionsInfoResponse.from_dictionary)

        return decoded

    def vendor_product_options_by_pk_delete(self,
                                            pk):
        """Does a DELETE request to /vendor_product_options/{pk}.

        TODO: type endpoint description here.

        Args:
            pk (int): TODO: type description here.

        Returns:
            VendorProductOptionsResponse2: Response from the API. Item
                deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/vendor_product_options/{pk}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'pk': {'value': pk, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 404:
            raise M400Exception('Not found', _response)
        elif _response.status_code == 422:
            raise M400Exception('Could not process entity', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VendorProductOptionsResponse2.from_dictionary)

        return decoded

    def vendor_product_options_by_pk_get(self,
                                         pk):
        """Does a GET request to /vendor_product_options/{pk}.

        Get an item model

        Args:
            pk (int): TODO: type description here.

        Returns:
            VendorProductOptionsResponse3: Response from the API. Item from
                Model

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/vendor_product_options/{pk}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'pk': {'value': pk, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise M400Exception('Bad request', _response)
        elif _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 404:
            raise M400Exception('Not found', _response)
        elif _response.status_code == 422:
            raise M400Exception('Could not process entity', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VendorProductOptionsResponse3.from_dictionary)

        return decoded

    def vendor_product_options_by_pk_put(self,
                                         pk,
                                         body):
        """Does a PUT request to /vendor_product_options/{pk}.

        TODO: type endpoint description here.

        Args:
            pk (int): TODO: type description here.
            body (VendorProductOptionsApiPut): Model schema

        Returns:
            VendorProductOptionsResponse4: Response from the API. Item
                changed

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/vendor_product_options/{pk}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'pk': {'value': pk, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise M400Exception('Bad request', _response)
        elif _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 404:
            raise M400Exception('Not found', _response)
        elif _response.status_code == 422:
            raise M400Exception('Could not process entity', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VendorProductOptionsResponse4.from_dictionary)

        return decoded
