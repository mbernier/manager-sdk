# -*- coding: utf-8 -*-

"""
bdfs

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Result(object):

    """Implementation of the 'Result' model.

    TODO: type model description here.

    Attributes:
        childs (list of object): TODO: type description here.
        icon (string): Icon name to show for this menu item
        label (string): Pretty name for the menu item
        name (string): The internal menu item name, maps to permission_name
        url (string): The URL for the menu item

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "childs": 'childs',
        "icon": 'icon',
        "label": 'label',
        "name": 'name',
        "url": 'url'
    }

    def __init__(self,
                 childs=None,
                 icon=None,
                 label=None,
                 name=None,
                 url=None):
        """Constructor for the Result class"""

        # Initialize members of the class
        self.childs = childs
        self.icon = icon
        self.label = label
        self.name = name
        self.url = url

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        childs = dictionary.get('childs')
        icon = dictionary.get('icon')
        label = dictionary.get('label')
        name = dictionary.get('name')
        url = dictionary.get('url')

        # Return an object of this model
        return cls(childs,
                   icon,
                   label,
                   name,
                   url)
