# -*- coding: utf-8 -*-

"""
manager

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from manager.api_helper import APIHelper
from manager.configuration import Server
from manager.controllers.base_controller import BaseController
from manager.http.auth.o_auth_2 import OAuth2
from manager.models.security_login_response import SecurityLoginResponse
from manager.models.security_refresh_response import SecurityRefreshResponse
from manager.exceptions.m_400_exception import M400Exception


class SecurityController(BaseController):

    """A Controller to access Endpoints in the manager API."""

    def __init__(self, config, call_back=None):
        super(SecurityController, self).__init__(config, call_back)

    def security_login_post(self,
                            body):
        """Does a POST request to /security/login.

        Authenticate and get a JWT access and refresh token

        Args:
            body (SecurityLoginRequest): TODO: type description here.

        Returns:
            SecurityLoginResponse: Response from the API. Authentication
                Successful

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/security/login'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise M400Exception('Bad request', _response)
        elif _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SecurityLoginResponse.from_dictionary)

        return decoded

    def security_refresh_post(self):
        """Does a POST request to /security/refresh.

        Use the refresh token to get a new JWT access token

        Returns:
            SecurityRefreshResponse: Response from the API. Refresh
                Successful

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/security/refresh'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise M400Exception('Unauthorized', _response)
        elif _response.status_code == 500:
            raise M400Exception('Fatal error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SecurityRefreshResponse.from_dictionary)

        return decoded
